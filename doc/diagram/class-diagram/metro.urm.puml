@startuml
package fr.univparis.metro {
  class App {
    + App()
    + main(args : String[]) {static}
  }
  class BouarahAlgorithm {
    + BouarahAlgorithm()
    - initShortestPath(graph : WGraph<T>, start : T, limit : int, dist : HashMap<Pair<T, Integer>, Double>, priQueue : PriorityQueue<Pair<T, Integer>>) {static}
    + shortestPath(graph : WGraph<T>, start : T, limit : int, equivalenceRelation : BiPredicate<T, T>, prev : HashMap<Pair<T, Integer>, Pair<T, Integer>>, dist : HashMap<Pair<T, Integer>, Double>) {static}
  }
  class Configuration {
    - cities : HashMap<String, String> {static}
    + Configuration()
    + getCitiesName() : Set<String> {static}
    + getFileName(s : String) : String {static}
    + loadFrom(ins : InputStream) {static}
  }
  class Dijkstra {
    + Dijkstra()
    - initShortestPath(g : WGraph<T>, s : T, dist : HashMap<T, Double>, priQueue : PriorityQueue<T>) {static}
    + shortestPath(g : WGraph<T>, s : T, prev : HashMap<T, T>, dist : HashMap<T, Double>) {static}
  }
  class GraphExporter {
    + GraphExporter()
    + exportToDOT(graph : WGraph<T>, output : File, desc : Function<T, String>) {static}
    + main(args : String[]) {static}
  }
  class Initialize {
    + Initialize()
    - getStationsName(g : WGraph<Station>) : Set<Station> {static}
    + initialize() {static}
    - whereFrom(g : WGraph<Station>) : Station {static}
    - whereTo(g : WGraph<Station>) : Station {static}
    - whichCity() : AbstractMap.SimpleEntry<String, String> {static}
  }
  class LimitedConnectionSearch {
    + LimitedConnectionSearch()
    - end(g : MatriceWGraph, start : String, end : String) : String {static}
    + floyd(d : Double[][]) : Double[][] {static}
    + floyd(direct : Double[][], via : T[][], intermediate : Integer[][]) {static}
    + getPath(g : MatriceWGraph, start : String, end : String) : ArrayList<Pair<String, String>> {static}
    - start(g : MatriceWGraph, start : String, end : String) : String {static}
    - startAndEnd(g : MatriceWGraph, start : String, end : String) : Pair<String, String> {static}
  }
  class ListStation {
    + ListStation()
    + getListStation(name : String) : String {static}
  }
  class MatriceWGraph {
    - direct : Double[][]
    - intermediate : Integer[][]
    - setOfVertices : HashMap<String, Integer>
    - via : Station[][]
    - MatriceWGraph(g : WGraph<Station>)
    + MatriceWGraph(g : WGraph<Station>, m : HashMap<String, MatriceWGraph>)
    + getDirect() : Double[][]
    + getForkAndCycleStation() : HashMap<String, Integer>
    + getIntermediate() : Integer[][]
    + getSetOfVertices() : HashMap<String, Integer>
    + getVia() : Station[][]
    - graphsLine(g : WGraph<Station>) : HashMap<String, WGraph<Station>> {static}
    + initializeAllLineGraphs(g : WGraph<Station>) : HashMap<String, MatriceWGraph> {static}
    - initializeDirectLine(d : Double[][]) : Double[][] {static}
  }
  class Pair<T, S> {
    - obj : T
    - value : S
    + Pair<T, S>(o : T, v : S)
    + equals(o : Object) : boolean
    + getObj() : T
    + getValue() : S
    + hashCode() : int
    + setValue(d : S)
  }
  class Parser {
    + defaultChangeStationWeight : Double {static}
    + defaultWeight : Double {static}
    + Parser()
    - addMetaStationAndChanging(g : WGraph<Station>, act : Station, createdStation : HashSet<String>, s : String) {static}
    - addNextStation(g : WGraph<Station>, prec : Station, s : String, line : String, ahead : boolean, behind : boolean, createdStation : HashSet<String>) : Station {static}
    - cycle(g : WGraph<Station>, sc : Scanner, start : Station, line : String, createdStation : HashSet<String>) : Station {static}
    - fork(g : WGraph<Station>, sc : Scanner, start : Station, line : String, createdStation : HashSet<String>) : Station {static}
    + loadFrom(is : InputStream) : WGraph<Station> {static}
  }
  class PriorityQueue<T> {
    - index : HashMap<T, Integer>
    - tree : ArrayList<Pair<T, Double>>
    + PriorityQueue<T>()
    + PriorityQueue<T>(initialCapacity : int)
    + add(val : T, key : Double) : boolean
    + contains(o : Object) : boolean
    + isEmpty() : boolean
    + poll() : T
    + remove(o : Object) : boolean
    - siftDown(i : int)
    - siftUp(i : int)
    - swap(i : int, j : int)
    + updatePriority(val : T, key : Double) : boolean
  }
  class Station {
    - line : String
    - name : String
    ~ Station(n : String, l : String)
    + equals(obj : Object) : boolean
    + getLine() : String
    + getName() : String
    + hashCode() : int
    + sameName(s : Station) : boolean
    + toString() : String
  }
  class Statistics {
    + Statistics()
    + averageNbOfStationPerLine(g : WGraph<Station>) : int {static}
    + averageTimeOnEachLine(g : WGraph<Station>, res : HashMap<String, Double>) : int {static}
    + extremumLine(g : WGraph<Station>, max : boolean) : String {static}
    + longestTimeTravelLine(g : WGraph<Station>) : Pair<String, Double> {static}
    + minimumCorrespondence(g : WGraph<T>, start : Predicate<T>, end : Predicate<T>, p : BiPredicate<T, T>) : int {static}
    + mostDistantStations(g : WGraph<T>, p1 : Predicate<T>, p2 : Predicate<T>) : Pair<Pair<T, T>, Double> {static}
    + shortestTimeTravelLine(g : WGraph<Station>) : Pair<String, Double> {static}
  }
  class Trafics {
    - actualTrafics : HashMap<String, WGraph<Station>> {static}
    - initialTrafics : HashMap<String, WGraph<Station>> {static}
    - reverts : HashMap<String, HashMap<String, WGraph<Station>>> {static}
    + Trafics()
    + addPerturbation(city : String, type : Perturbation, name : String, parameter : Object) {static}
    + allTraficsSlowDown(city : String, times : double) : WGraph<Station> {static}
    + entireStationShutDown(city : String, station : String) : WGraph<Station> {static}
    + getCities() : Set<String> {static}
    + getGraph(city : String) : WGraph<Station> {static}
    + getInitialGraph(city : String) : WGraph<Station> {static}
    + getPerturbation(city : String) : Set<String> {static}
    + initTrafics() {static}
    + lineShutdown(city : String, line : String) : WGraph<Station> {static}
    + lineSlowDown(city : String, line : String, times : double) : WGraph<Station> {static}
    + partOfLineShutDown(city : String, start : Station, end : Station) : WGraph<Station> {static}
    + partOfLineSlowDown(city : String, start : Station, end : Station, times : Double) : WGraph<Station> {static}
    + partOfStationShutDown(city : String, st : Station) : WGraph<Station> {static}
    + revertPerturbation(city : String, name : String) {static}
  }
  enum Perturbation {
    + ALL_TRAFICS_SLOW_DOWN {static}
    + ENTIRE_STATION_SHUT_DOWN {static}
    + LINE_SHUTDOWN {static}
    + LINE_SLOW_DOWN {static}
    + PART_LINE_SHUT_DOWN {static}
    + PART_LINE_SLOW_DOWN {static}
    + PART_STATION_SHUT_DOWN {static}
    + valueOf(name : String) : Perturbation {static}
    + values() : Perturbation[] {static}
  }
  class WGraph<T> {
    - wGraph : HashMap<T, HashMap<T, Double>>
    + WGraph<T>()
    + addDoubleEdge(e : T, weight : Double, p : Predicate<T>) : boolean
    + addEdge(s : T, p : T, weight : Double) : boolean
    + addVertex(v : T) : boolean
    + apply(g : WGraph<T>)
    + clone() : WGraph<T>
    + containsVertex(s : T) : boolean
    + deleteVertex(v : T) : boolean
    + equals(g : WGraph<T>) : boolean
    + getVertices() : Set<T>
    + nbVertex() : int
    + nbVertex(p : Predicate<T>) : int
    + neighbors(vertex : T) : Set<T>
    + removeEdge(s : T, p : T) : boolean
    + setWeight(s : T, p : T, weight : Double)
    + splitVertex(old : T, newVert1 : T, newVert2 : T)
    + vertexToString(p : Predicate<T>) : String
    + weight(s : T, p : T) : Double
  }
}
Perturbation ..+ Trafics
@enduml